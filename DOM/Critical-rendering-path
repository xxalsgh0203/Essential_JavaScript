브라우저에서 URL 을 입력하게 되면 아래와 같은 순서로 진행이 됩니다

1. request/response -> 2. loading -> 3. scripting -> 4. rendering -> 5. layout -> 6. painting

브라우저가 서버에게 HTML 파일을 요청하고 파일을 서버에게 받아서 로딩을 하게 된다.
데이터를 받아와서 HTML 을 한줄한줄 읽어 DOM 요소로 변환한다.(scripting)
그 다음에 이것을 브라우저 window 에 표기하기 위해 rendering tree 를 만들고 각각의 요소들이 어떤 위치에 얼마나 크게 표시될건지 계산한다음에
그림을 그리게 됩니다.(painting).

이걸 조금더 카테고리를 나누어서 생각해보면 
HTML 페이지에서 브라우저가 이해할 수 있도록 브라우저만의 언어로 바꾸는 Construction 파트와 
만들어진 브라우저 이해할 수 있는 Rendering tree 를 이용해서 구조를 작성하고 어디에 배치할건지 계산을 한 다음에 실제로 브라우저 window 에 그림을 그려주는, rendering 하게되는
Operation 파트로 나뉘게 됩니다. 

Construction 파트에는 우리가 앞에서 살펴본 DOM 요소로 변환하고 CSSOM 을 만들게 되고 Render tree 를 최종적으로 만드는 것까지 의미하게 되며 
Operation 과정에서 layout, paing, composition 과정을 통해서 최종적으로 사용자에게 내용이 우리의 웹페이지가 보여지게 되는 것이다. 

layout 이란?
layout 은 우리가 만든 RenderTree 를 이용해서 즉 DOM 요소 뿐만 아니라 CSS 스타일, 즉 최종적으로 계산된 css  스타일이 포함되어 있습니다.
이제 그 정보를 기반해서 window 위에서 이 요소는 이정도 위치에 그리고 이정도 크기로 배치를 하게 되고 이러한 레이아웃을 구상하게 됩니다. (x와 y, 넓이 등등)
이제 이런 레이아웃을 맞춰야지 정확하게 어디에 얼마만큼 크게 그림을 그려야 될지 계산이 됩니다. 이런 레이아웃을 통해서 paint 과정이 일어나게 됩니다. 

paint 과정이란?
우리가 여기에 계산한 것들을 바로 브라우저에 그림을 그리는 것이 아니라 우리가 이 요소들을 어떻게 배치했는냐에 따라 paint 부분에서는 각각 부분을 조금 조금씩 
잘게 잘게 나누어서 이미지를 준비해놓습니다. 즉 각각의 요소들을, 이미지를 비트맵이라고 합니다.
즉, 컴퓨터가 이해할 수 있는 이미지를 비트맵 데이터 형태로 변환하게 됩니다. 
paint  단계에서 아~얘네들은 지금 여기에 있는 얘네들은 따로 위에 둥둥 떠있으니까 얘를 부분적으로 그리면 되겠지
그리고 얘는 오른쪽에서 혼자 있으니까 얘도 이렇게 준비하면 되겟지 아 얘는 지금 제일 위에 있네 얘네 두개는 같이 묶여 있네 이런식으로 따로따로 나누어서 계산을 하게 됩니다.
그리고 얘네는 각각 같은 레이어에 있으니까 같은 z-index 에 있으니까 같이 묶어서 이렇게 paint 에서는 레이어 단계를 만들어서 레이어 별로 paint 를 준비해만 놓습니다. 
'아니 브라우저 그냥 한번에 그리면 되지 뭘 그렇게 복잡하게 레이어 별로 준비하는 거지? 라는 생각이 들 수 있는데 이것은 브라우저가 조금 성능 개선을 위해서 
스스로 이렇게 준비를 해놓는 겁니다. 
만약 우리가 이 어떤 요소의 위치를 변경하거나 투명도를 조금 바꾼다면 만약 이런 레이어 기능을 이용하지 않고 전체적으로 그림을 그리게 되면 
브라우저는 이 전체 웹페이지를 즉 우리가 전체적으로 뭔가 그림을 그렸다면 브라우저는 이 한부분만 바꾸기 위해서 다시 전체적으로 그림을 또 수정하게 됩니다. 
하지만 이렇게 레이어 단위로만 하게 되면 이 부분적인 레이어만 수정을 해주면 됩니다. 

이렇게 paint 를 이해했다면 composition 는 이해하기 쉬울 것입니다. 
이렇게 미리 준비한 레이어를 순서대로 차곡차곡 브라우저 위에다가 표기하면 됩니다. 
이제 준비한 아이들을 브라우저에 얘 먼저 내려놓고 z-index 가 높은 아이를 제일 나중에, 얘를 먼저 올려놓고 그 위에 얘를 올려놓고 composition 하게 되는 것입니다. 
우리가 이렇게 HTMl 페이지에에서 브라우저가 표기할 수 있는 이 단계까지 'Critical Rendering Path' 라고 부릅니다.


*** 자 그럼 Construction 타임때, (operation) 타임 때 한가지씩 잡아봅시다
dom 에서 render tree 를 만들때까지 어떻게 하면 빠르게만들수 있을까요?

-- 당연히 DOM 요소가 작으면 작을수록 css 규칙이 작으면 작을수록 트리가 작아지기 때문에 빠르게 만들 수 있습니다.
불필요한 wrapping class 나 요소, div 태그들을 남용하지 맙시다!!!

*** 자 그럼 operation 을 어떻게 줄일 수 있을까요?
페인트를 줄입니다. transform 을 이용해서 요소의 위치를 바꾸는거면 paint 과정이 일어나지 않고 composition 만 발생하기 때문에 괜찮으나 
요소에 그림을 추가하거나 수정을 한다면 paint 가 다시 발생하기 때문에 안좋겠죠? 
그리고 최악의 경우는 layout 입니다. 내가 어떤 요소를 움직임으로서 다른 주변아이들의 position 이 바뀌게 된다면 
다시 layout 부터 위치계산이 다시돼야 하기 때문에 paint 도, composition 도 다시 해야하기 때문에 성능이 나빠지게 됩니다.
따라서 composition 만 바뀌게 되는게 베스트며, paint 까지는 soso, layout 까지 다시 건들게 된다면 worst 입니다.